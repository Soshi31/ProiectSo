#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>

volatile sig_atomic_t got_command = 0;

void handle_usr1(int sig) { got_command = 1; }

void handle_term(int sig) {
    printf("Monitor shutting down...\n");
    usleep(1000000);
    exit(0);
}

void process_command() {
    FILE *f = fopen("hub_command.txt", "r");
    if (!f) {
        perror("command file");
        return;
    }

    char cmd[256];
    fgets(cmd, sizeof(cmd), f);
    fclose(f);

    printf("Monitor received command: %s\n", cmd);
    char full_cmd[300];
    snprintf(full_cmd, sizeof(full_cmd), "./treasure_manager %s", cmd);
    system(full_cmd);
}

int main() {
    struct sigaction sa1 = {.sa_handler = handle_usr1, .sa_flags = SA_RESTART};
    sigaction(SIGUSR1, &sa1, NULL);

    struct sigaction sa2 = {.sa_handler = handle_term, .sa_flags = SA_RESTART};
    sigaction(SIGTERM, &sa2, NULL);

    printf("Monitor ready (PID %d)\n", getpid());

    while (1) {
        pause();
        if (got_command) {
            process_command();
            got_command = 0;
        }
    }

    return 0;
}
